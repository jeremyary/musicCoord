package jary.drools

import jary.drools.model.AdjustTestState;
import jary.drools.model.DanceEvent;
import jary.drools.model.DanceTrendDown;
import jary.drools.model.DanceTrendUp;
import jary.drools.model.Interval;
import jary.drools.model.SongAdjustEvent;
import jary.drools.model.SongAnalysisEvent;
import java.util.List;
import java.util.ArrayList;

global jary.drools.RuleDelegate delegate;

dialect "mvel"

rule "insert interval N second marker"
    timer(int: 4s)
when
    $i : Interval ( !expired )
then
    System.out.println("interval timer triggered");
    modify( $i ) { setExpired(true) };
end

rule "when timer expires, take measurement"
when
    $i : Interval ( expired )
    $sa : SongAnalysisEvent (  )
    $events : List (  ) from collect ( DanceEvent( ) )
then
    System.out.println("Taking calculation...");
    modify( $i ) { setExpired(false) };
    delegate.calculateAdjustment($sa, $events, 4);
end

rule "toggle speed test event - speed up"
    timer (int: 5s)
when
    $state : AdjustTestState ( !isFast )
then
    System.out.println("SENDING SPEED UP");
    delegate.dispatchAdjustment(new SongAdjustEvent("fooTitle", System.currentTimeMillis(), 1000L, 1.5));
    modify( $state ){ setIsFast(true) };
end

rule "toggle speed test event - slow down"
    timer (int: 5s)
when
    $state : AdjustTestState ( isFast )
then
    System.out.println("SENDING SLOW DOWN");
    delegate.dispatchAdjustment(new SongAdjustEvent("fooTitle", System.currentTimeMillis(), 1000L, 1.5));
    modify( $state ){ setIsFast(false) };
end




//TODO: divide by 2 (offset * 2) b/c they're dancing on half beats
